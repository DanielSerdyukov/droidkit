apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
}

dependencies {
    compile 'com.android.support:support-v13:22.2.1'
    compile 'io.reactivex:rxjava:1.0.14'
    provided 'net.danlew:android.joda:2.8.1'
    provided "droidkit:droidkit-processor:5.1.1"
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
}

apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // use hidden configuration, for details look into JacocoPlugin.groovy
    jacocoClasspath = project.configurations['androidJacocoAnt']

    sourceDirectories = fileTree(dir: "${project.projectDir}/src/main/java")
    classDirectories = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ])
    executionData = fileTree(dir: project.buildDir, includes: ['**/*.exec', '**/*.ec'])
}

if (System.getenv('BINTRAY_USER') || project.hasProperty('bintrayUser')) {
    apply from: 'bintray.gradle'
}
